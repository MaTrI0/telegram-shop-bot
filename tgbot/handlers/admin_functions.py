# - *- coding: utf- 8 - *-
import asyncio

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.exceptions import CantParseEntities

from tgbot.data.loader import dp, bot
from tgbot.keyboards.inline_admin import profile_search_finl, profile_search_return_finl
from tgbot.keyboards.inline_all import mail_confirm_inl
from tgbot.services.api_sqlite import *
from tgbot.utils.misc.bot_filters import IsAdmin
from tgbot.utils.misc_functions import open_profile_admin


# –†–∞—Å—Å—ã–ª–∫–∞
@dp.message_handler(IsAdmin(), text="üì¢ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ", state="*")
async def functions_mail(message: Message, state: FSMContext):
    await state.finish()

    await state.set_state("here_mail_text")
    await message.answer("<b>üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!</b>\n"
                         "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞")


# –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(IsAdmin(), text="üë§ –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è üîç", state="*")
async def functions_profile(message: Message, state: FSMContext):
    await state.finish()

    await state.set_state("here_profile")
    await message.answer("<b>üë§ –í–≤–µ–¥–∏—Ç–µ @login –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>")


# # –ü–æ–∏—Å–∫ —á–µ–∫–æ–≤
@dp.message_handler(IsAdmin(), text="üßæ –ü–æ–∏—Å–∫ —á–µ–∫–æ–≤ üîç", state="*")
async def functions_receipt(message: Message, state: FSMContext):
    await state.finish()

    await state.set_state("here_receipt")
    await message.answer("<b>üßæ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞</b>")


######################################## –ü–†–ò–ù–Ø–¢–ò–ï –ü–û–ò–°–ö–û–í–´–• –î–ê–ù–ù–´–• ########################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–π–¥–∏ –∏–ª–∏ –ª–æ–≥–∏–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(IsAdmin(), state="here_profile")
@dp.message_handler(IsAdmin(), text_startswith=".user")
async def functions_profile_get(message: Message, state: FSMContext):
    find_user = message.text

    if ".user" in find_user:
        find_user = message.text.split(" ")
        if len(find_user) > 1:
            find_user = find_user[1]
        else:
            await message.answer("<b>‚ùå –í–∏ –Ω–µ —É–∫–∞–∑–∞–ª–∏ @login –ª–∏–±–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>\n"
                                 "üë§ –í–≤–µ–¥–∏—Ç–µ @login –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

    if find_user.isdigit():
        get_user = get_userx(user_id=find_user)
    else:
        if find_user.startswith("@"): find_user = find_user[1:]
        get_user = get_userx(user_login=find_user.lower())

    if get_user is not None:
        await state.finish()
        await message.answer(open_profile_admin(get_user['user_id']),
                             reply_markup=profile_search_finl(get_user['user_id']))
    else:
        await message.answer("<b>‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω!</b>\n"
                             "üë§ –í–≤–µ–¥–∏—Ç–µ @login –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


# –ü—Ä–∏–Ω—è—Ç–∏–µ —á–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
@dp.message_handler(IsAdmin(), state="here_receipt")
@dp.message_handler(IsAdmin(), text_startswith=".rec")
async def functions_receipt_get(message: Message, state: FSMContext):
    find_receipt = message.text

    if ".rec" in find_receipt:
        find_receipt = message.text.split(" ")
        if len(find_receipt) > 1:
            find_receipt = find_receipt[1]
        else:
            await message.answer("<b>‚ùå –í–∏ –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä —á–µ–∫–∞!.</b>\n"
                                 "üßæ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞.")
            return

    if find_receipt.startswith("#"): find_receipt = find_receipt[1:]

    get_purchase = get_purchasex(purchase_receipt=find_receipt)

    if get_purchase is not None:
        await state.finish()

        await message.answer(
            f"<b>üßæ –ß–µ–∫: <code>#{get_purchase['purchase_receipt']}</code></b>\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={get_purchase['user_id']}'>{get_purchase['user_name']}</a> | <code>{get_purchase['user_id']}</code>\n"
            f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: <code>{get_purchase['purchase_position_name']}</code>\n"
            f"üì¶ –ö—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤: <code>{get_purchase['purchase_count']}—à—Ç</code>\n"
            f"üí∞ –¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: <code>{get_purchase['purchase_price_one']}—Ä—É–±.</code>\n"
            f"üí∏ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: <code>{get_purchase['purchase_price']}—Ä—É–±.</code>\n"
            f"üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{get_purchase['purchase_date']}</code>"
        )
        return
    else:
        await message.answer("<b>‚ùå –í–∏ –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä —á–µ–∫–∞!.</b>\n"
                                 "üßæ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞.")


######################################## –†–ê–°–°–´–õ–ö–ê ########################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(IsAdmin(), state="here_mail_text")
async def functions_mail_get(message: Message, state: FSMContext):
    await state.update_data(here_mail_text="üì¢ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ.\n" + str(message.text))
    get_users = get_all_usersx()

    try:
        cache_msg = await message.answer(message.text)
        await cache_msg.delete()

        await state.set_state("here_mail_confirm")
        await message.answer(
            f"<b>üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å <code>{len(get_users)}</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–æ–±—â–µ–Ω–∏—è?</b>\n"
            f"{message.text}",
            reply_markup=mail_confirm_inl,
            disable_web_page_preview=True
        )
    except CantParseEntities:
        await message.answer("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∫–∑—É HTML.</b>\n"
                             "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
                             "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É.")


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="confirm_mail", state="here_mail_confirm")
async def functions_mail_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]

    send_message = (await state.get_data())['here_mail_text']
    get_users = get_all_usersx()
    await state.finish()

    if get_action == "yes":
        await call.message.edit_text(f"<b>üì¢ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å... (0/{len(get_users)})</b>")
        asyncio.create_task(functions_mail_make(send_message, call))
    else:
        await call.message.edit_text("<b>üì¢ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è‚úÖ</b>")


# –°–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
async def functions_mail_make(message, call: CallbackQuery):
    receive_users, block_users, how_users = 0, 0, 0
    get_users = get_all_usersx()
    get_time = get_unix()

    for user in get_users:
        try:
            await bot.send_message(user['user_id'], message, disable_web_page_preview=True)
            receive_users += 1
        except:
            block_users += 1

        how_users += 1

        if how_users % 10 == 0:
            await call.message.edit_text(f"<b>üì¢ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å... ({how_users}/{len(get_users)})</b>")

        await asyncio.sleep(0.08)

    await call.message.edit_text(
        f"<b>üì¢ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–∫–æ–Ω—á–µ–Ω–æ –∑–∞ <code>{get_unix() - get_time}—Å–µ–∫</code></b>\n"
        f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(get_users)}</code>\n"
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: <code>{receive_users}</code>\n"
        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <code>{block_users}</code>"
    )


######################################## –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–ï–ú ########################################
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_refresh", state="*")
async def functions_profile_refresh(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]

    await state.finish()

    await call.message.delete()
    await call.message.answer(open_profile_admin(user_id), reply_markup=profile_search_finl(user_id))


# –ü–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_purchases", state="*")
async def functions_profile_purchases(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]

    last_purchases = last_purchasesx(user_id, 10)

    if len(last_purchases) >= 1:
        await call.answer("üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        await call.message.delete()

        for purchases in last_purchases:

            await call.message.answer(f"<b>üßæ –ß–µ–∫: <code>#{purchases['purchase_receipt']}</code></b>\n"
                                      f"üéÅ –¢–æ–≤–∞—Ä: <code>{purchases['purchase_position_name']} | {purchases['purchase_count']}—à—Ç | {purchases['purchase_price']}—Ä—É–±.</code>\n"
                                      f"üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{purchases['purchase_date']}</code>\n")

        await call.message.answer(open_profile_admin(user_id), reply_markup=profile_search_finl(user_id))
    else:
        await call.answer("‚ùó –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∫—É–ø–∫–∏", True)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_message", state="*")
async def functions_profile_user_message(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]

    await state.update_data(here_profile=user_id)
    await state.set_state("here_profile_message")

    await call.message.edit_text("<b>üíå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n"
                                 "‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                                 reply_markup=profile_search_return_finl(user_id))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(IsAdmin(), state="here_profile_message")
async def functions_profile_user_message_get(message: Message, state: FSMContext):
    user_id = (await state.get_data())['here_profile']
    await state.finish()

    get_message = "<b>üíå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n" + clear_html(message.text)
    get_user = get_userx(user_id=user_id)

    await message.bot.send_message(user_id, get_message)
    await message.answer(f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a> "
                         f"–ë—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
                         f"{get_message}")

    await message.answer(open_profile_admin(user_id), reply_markup=profile_search_finl(user_id))


@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_cart", state="*")
async def functions_profile_cart(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]
    get_user = get_userx(user_id=user_id)

    get_cart_items = get_user_cart(user_id=user_id)

    if not get_cart_items:
        return await call.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ :(")

    await call.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞:")
    await call.message.delete()

    i = 1

    for item in get_cart_items:
        get_position = get_positionx(position_id=item.get("position_id"))
        await call.message.answer(f"""
        {i}) üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {get_position.get("position_name")}
             üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.get("position_count")}
             üìè –†–∞–∑–º–µ—Ä: {item.get("position_size")}
             üé® –¶–≤–µ—Ç: {item.get("position_color")}
             üí∞ –¶–µ–Ω–∞: {item.get("position_price")}

    ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
            """)

        i += 1

    await call.message.answer(open_profile_admin(user_id), reply_markup=profile_search_finl(user_id))
