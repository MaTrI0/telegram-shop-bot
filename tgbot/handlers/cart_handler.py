from time import sleep

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton

from tgbot.keyboards.inline_all import profile_open_inl
from tgbot.keyboards.inline_page import products_item_category_swipe_fp
from tgbot.keyboards.inline_user import success_added_item_cart, cart_keyboard, cart_pay_confirm
from tgbot.keyboards.reply_all import menu_frep
from tgbot.services.api_sqlite import *
from tgbot.data.loader import dp, bot
from tgbot.utils.misc_functions import cart_logistic, open_profile_user


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫o—Ä–∑–∏–Ω—É
@dp.callback_query_handler(text_startswith="cart_item_confirm:", state="*")
async def user_add_cart_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    position_id = int(call.data.split(":")[2])

    if get_action == "yes":
        get_count = int(call.data.split(":")[3])
        await state.update_data(get_count=get_count)

        get_select_color = str(call.data.split(":")[4])
        await state.update_data(get_select_color=get_select_color)

        get_select_size = str(call.data.split(":")[5])
        await state.update_data(get_select_size=get_select_size)

        await call.message.edit_text("<b>üîÑ –û–∂–∏–¥–∞–π—Ç–µ, —Ç–æ–≤–∞—Ä—ã –≥–æ—Ç–æ–≤—è—Ç—Å—è</b>")

        get_position = get_positionx(position_id=position_id)
        await state.update_data(get_position=get_position)

        amount_pay = int(get_position['position_price'] * get_count)
        await state.update_data(amount_pay=amount_pay)

        if 1 <= int(get_count) <= 100:
            await call.message.delete()

            add_user_cart(user_id=call.from_user.id, position_id=position_id, position_count=get_count,
                          position_color=get_select_color, position_size=get_select_size, position_price=amount_pay)

            cart_item = 0
            get_user_cart_items = get_user_cart(user_id=call.from_user.id)

            if get_user_cart_items is None:
                pass
            else:
                for items in get_user_cart_items:
                    cart_item += 1

            await call.message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ: ",
                                      reply_markup=success_added_item_cart(cart_item))
        else:
            await call.message.answer("<b>üéÅ –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫o—Ä–∑–∏–Ω—É –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è.</b>",
                                      reply_markup=menu_frep(call.from_user.id))
    else:
        if len(get_all_categoriesx()) >= 1:
            await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                         reply_markup=products_item_category_swipe_fp(0))
        else:
            await call.message.edit_text("<b>‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫o—Ä–∑–∏–Ω—É.</b>")


# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä–∑–∏–Ω—ã
@dp.callback_query_handler(text_startswith="cart_open", state="*")
async def user_open_cart(call: CallbackQuery, state: FSMContext):
    cart = cart_logistic(user_id=call.from_user.id)

    if cart is None:
        await call.answer(f"üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ :(")
    else:
        await call.message.edit_text(f"{cart}", reply_markup=cart_keyboard())


# –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
@dp.callback_query_handler(text_startswith="clear_cart", state="*")
async def user_clear_cart(call: CallbackQuery, state: FSMContext):
    await call.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    remove_cart(user_id=call.from_user.id)

    cart_item = 0
    get_user_cart_items = get_user_cart(user_id=call.from_user.id)

    if get_user_cart_items is None:
        pass
    else:
        for items in get_user_cart_items:
            cart_item += 1

    await call.message.edit_text(open_profile_user(call.from_user.id), reply_markup=profile_open_inl(cart_item))


# –û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
@dp.callback_query_handler(text_startswith="cart_pay", state="*")
async def start_pay_cart(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("üõí –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ—Ä–∑–∏–Ω–µ?", reply_markup=cart_pay_confirm())


# –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
@dp.callback_query_handler(text_startswith="main_menu", state="*")
async def user_main_menu(call: CallbackQuery, state: FSMContext):
    await state.finish()

    cart_item = 0
    get_user_cart_items = get_user_cart(user_id=call.from_user.id)

    if get_user_cart_items is None:
        pass
    else:
        for items in get_user_cart_items:
            cart_item += 1

    await call.message.edit_text(open_profile_user(call.from_user.id), reply_markup=profile_open_inl(cart_item))
