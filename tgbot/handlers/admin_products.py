# - *- coding: utf- 8 - *-
from contextlib import suppress

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.exceptions import CantParseEntities, MessageCantBeDeleted

from tgbot.data.loader import dp
from tgbot.keyboards.inline_admin import category_edit_open_finl, position_edit_open_finl, category_edit_delete_finl, \
    position_edit_delete_finl, position_edit_cancel_finl, category_edit_cancel_finl
from tgbot.keyboards.inline_all import category_remove_confirm_inl, position_remove_confirm_inl, \
    close_inl
from tgbot.keyboards.inline_page import *
from tgbot.services.api_sqlite import *
from tgbot.utils.misc.bot_filters import IsAdmin
from tgbot.utils.misc_functions import get_position_admin


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(IsAdmin(), text="üóÉ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚ûï", state="*")
async def product_category_create(message: Message, state: FSMContext):
    await state.finish()

    await state.set_state("here_category_name")
    await message.answer("<b>üóÉ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üè∑</b>")


# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message_handler(IsAdmin(), text="üóÉ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é üñç", state="*")
async def product_category_edit(message: Message, state: FSMContext):
    await state.finish()

    if len(get_all_categoriesx()) >= 1:
        await message.answer("<b>üóÉ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
                             reply_markup=category_edit_swipe_fp(0))
    else:
        await message.answer("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>")


# –û–∫–Ω–æ —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ–∑–∏—Ü–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
@dp.message_handler(IsAdmin(), text="üóÉ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚ùå", state="*")
async def product_category_remove(message: Message, state: FSMContext):
    await state.finish()

    await message.answer("<b>üóÉ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏? ‚ùå</b>\n"
                         "‚ùó –¢–∞–∫ –∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã",
                         reply_markup=category_remove_confirm_inl)


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsAdmin(), text="üéÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï", state="*")
async def product_position_create(message: Message, state: FSMContext):
    await state.finish()

    if len(get_all_categoriesx()) >= 1:
        await message.answer("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>",
                             reply_markup=position_create_swipe_fp(0))
    else:
        await message.answer("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏</b>")


# –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsAdmin(), text="üéÅ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é üñç", state="*")
async def product_position_edit(message: Message, state: FSMContext):
    await state.finish()

    if len(get_all_categoriesx()) >= 1:
        await message.answer("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–πüñç</b>",
                             reply_markup=position_edit_category_swipe_fp(0))
    else:
        await message.answer("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π</b>")


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
@dp.message_handler(IsAdmin(), text="üéÅ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ ‚ùå", state="*")
async def product_position_remove(message: Message, state: FSMContext):
    await state.finish()

    await message.answer("<b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏? ‚ùå</b>\n"
                         "‚ùó –¢–∞–∫ –∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Ç–æ–≤–∞—Ä—ã",
                         reply_markup=position_remove_confirm_inl)


################################################################################################
####################################### –°–û–ó–î–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô #####################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsAdmin(), state="here_category_name")
async def product_category_create_name(message: Message, state: FSMContext):
    if len(message.text) <= 50:
        category_id = get_unix()
        add_categoryx(category_id, clear_html(message.text))

        await state.finish()

        get_positions = len(get_positionsx(category_id=category_id))
        get_category = get_categoryx(category_id=category_id)

        await message.answer(f"<b>üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code></b>\n"
                             "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                             f"üéÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: <code>{get_positions}—à—Ç</code>",
                             reply_markup=category_edit_open_finl(category_id, 0))
    else:
        await message.answer("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üóÉ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üè∑")


################################################################################################
####################################### –ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò ####################################
# –í—ã–±–æ—Ä —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="category_edit_open:", state="*")
async def product_category_edit_open(call: CallbackQuery, state: FSMContext):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    await state.finish()

    get_positions = len(get_positionsx(category_id=category_id))
    get_category = get_categoryx(category_id=category_id)

    await call.message.edit_text(f"<b>üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code></b>\n"
                                 "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                 f"üéÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: <code>{get_positions}—à—Ç</code>",
                                 reply_markup=category_edit_open_finl(category_id, remover))


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="catategory_edit_swipe:", state="*")
async def product_category_edit_swipe(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text("<b>üóÉ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
                                 reply_markup=category_edit_swipe_fp(remover))


######################################## –°–ê–ú–û –ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò ########################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="category_edit_name:", state="*")
async def product_category_edit_name(call: CallbackQuery, state: FSMContext):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_category_remover=remover)

    with suppress(MessageCantBeDeleted):
        await call.message.delete()

    await state.set_state("here_change_category_name")
    await call.message.answer("<b>üóÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üè∑</b>",
                              reply_markup=category_edit_cancel_finl(category_id, remover))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(IsAdmin(), state="here_change_category_name")
async def product_category_edit_name_get(message: Message, state: FSMContext):
    category_id = (await state.get_data())['here_cache_category_id']
    remover = (await state.get_data())['here_cache_category_remover']

    if len(message.text) <= 50:
        await state.finish()

        update_categoryx(category_id, category_name=clear_html(message.text))

        get_positions = get_positionsx(category_id=category_id)
        get_category = get_categoryx(category_id=category_id)

        await message.answer(f"<b>üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code></b>\n"
                             "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                             f"üéÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: <code>{len(get_positions)}—à—Ç</code>",
                             reply_markup=category_edit_open_finl(category_id, remover))
    else:
        await message.answer("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üóÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üè∑",
                             reply_markup=category_edit_cancel_finl(category_id, remover))


# –û–∫–Ω–æ —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@dp.callback_query_handler(IsAdmin(), text_startswith="category_edit_delete:", state="*")
async def product_category_edit_delete(call: CallbackQuery, state: FSMContext):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    await call.message.edit_text("<b>‚ùó –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤—Å–µ –µ–µ –¥–∞–Ω–Ω—ã–µ?</b>",
                                 reply_markup=category_edit_delete_finl(category_id, remover))


# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="category_delete:", state="*")
async def product_category_edit_delete_confirm(call: CallbackQuery, state: FSMContext):
    category_id = call.data.split(":")[1]
    get_action = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    if get_action == "yes":
        remove_categoryx(category_id=category_id)
        remove_positionx(category_id=category_id)

        await call.answer("üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –≤—Å–µ –µ–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã‚úÖ")
        if len(get_all_categoriesx()) >= 1:
            await call.message.edit_text("<b>üóÉ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
                                         reply_markup=category_edit_swipe_fp(remover))
        else:
            with suppress(MessageCantBeDeleted):
                await call.message.delete()
    else:
        get_fat_count = len(get_positionsx(category_id=category_id))
        get_category = get_categoryx(category_id=category_id)

        await call.message.edit_text(f"<b>üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code></b>\n"
                                     "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                     f"üéÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: <code>{get_fat_count}—à—Ç</code>",
                                     reply_markup=category_edit_open_finl(category_id, remover))


################################################################################################
#################################### –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –ö–ê–¢–ï–ì–û–†–ò–ô ###################################
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ–∑–∏—Ü–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
@dp.callback_query_handler(IsAdmin(), text_startswith="confirm_remove_category:", state="*")
async def product_category_remove_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]

    if get_action == "yes":
        get_categories = len(get_all_categoriesx())
        get_positions = len(get_all_positionsx())

        clear_categoryx()
        clear_positionx()

        await call.message.edit_text(
            f"<b>üóÉ –í—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏<code>({get_categories}—à—Ç)</code>, "
            f"–ø–æ–∑–∏—Ü–∏–∏<code>({get_positions}—à—Ç)</code>)</code> ‚òë</b>")
    else:
        await call.message.edit_text("<b>üóÉ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚úÖ</b>")


################################################################################################
####################################### –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò #####################################
# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
@dp.callback_query_handler(IsAdmin(), text_startswith="position_create_swipe:", state="*")
async def product_position_create_swipe(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ‚ûï</b>",
                                 reply_markup=position_create_swipe_fp(remover))


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_create_open:", state="*")
async def product_position_create_select_category(call: CallbackQuery, state: FSMContext):
    category_id = call.data.split(":")[1]

    await state.update_data(here_cache_change_category_id=category_id)

    await state.set_state("here_position_name")
    await call.message.edit_text("<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑</b>")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsAdmin(), state="here_position_name")
async def product_position_create_name(message: Message, state: FSMContext):
    if len(message.text) <= 50:
        await state.update_data(here_position_name=clear_html(message.text))

        await state.set_state("here_position_price")
        await message.answer("<b>üéÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞</b>")
    else:
        await message.answer("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑")


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsAdmin(), state="here_position_price")
async def product_position_create_price(message: Message, state: FSMContext):
    if message.text.isdigit():
        if 0 <= int(message.text) <= 10000000:
            await state.update_data(here_position_price=message.text)

            await state.set_state("here_position_courier_delivery_price")
            await message.answer("<b>üéÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º üì¶</b>\n"
                                 "‚ùï –ü—Ä–∏—à–ª–∏—Ç–µ <code>0</code> —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º."
                                 )
        else:
            await message.answer("<b>‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 —Ä—É–±. –∏–ª–∏ –±–æ–ª—å—à–µ 10 000 000—Ä—É–±.</b>\n"
                                 "üéÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞")
    else:
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.</b>\n"
                             "üéÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞")


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º
@dp.message_handler(IsAdmin(), state="here_position_courier_delivery_price")
async def product_position_airplane_price(message: Message, state: FSMContext):
    if message.text.isdigit():
        if 0 <= int(message.text) <= 10000000:
            await state.update_data(here_position_courier_delivery_price=message.text)

            await state.set_state("here_position_by_mail_russia_price")
            await message.answer("<b>üéÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏ üè£</b>\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º."
                                 )
        else:
            await message.answer("<b>‚ùå –¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 —Ä—É–±. –∏–ª–∏ –±–æ–ª—å—à–µ 10 000 000—Ä—É–±.</b>\n" 
                                 "üéÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º üì¶\n" 
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º."
                                 )
    else:
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.</b>\n" 
                             "üéÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º üì¶\n" 
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º."
                             )


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏
@dp.message_handler(IsAdmin(), state="here_position_by_mail_russia_price")
async def product_position_ship_price(message: Message, state: FSMContext):
    if message.text.isdigit():
        if 0 <= int(message.text) <= 10000000:
            await state.update_data(here_position_by_mail_russia_price=message.text)

            await state.set_state("here_position_transport_company_price")
            await message.answer("<b>üéÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π üöö</b>\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º."
                                 )
        else:
            await message.answer("<b>‚ùå –¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 —Ä—É–±. –∏–ª–∏ –±–æ–ª—å—à–µ 10 000 000—Ä—É–±.</b>\n" 
                                 "üéÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏ üè£\n" 
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º." )
    else:
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.</b>\n" 
                             "üéÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏ üè£\n" 
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º."
                             )


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π
@dp.message_handler(IsAdmin(), state="here_position_transport_company_price")
async def product_position_ship_price(message: Message, state: FSMContext):
    if message.text.isdigit():
        if 0 <= int(message.text) <= 10000000:
            await state.update_data(here_position_transport_company_price=message.text)

            await state.set_state("here_position_description")
            await message.answer("<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú</b>\n" 
                                 "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n" 
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
                                 )
        else:
            await message.answer("<b>‚ùå –¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 —Ä—É–±. –∏–ª–∏ –±–æ–ª—å—à–µ 10 000 000—Ä—É–±.</b>\n" 
                                 "üéÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π üöö\n" 
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º." )
    else:
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.</b>\n" 
                             "üéÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π üöö\n" 
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º."
                             )


# –ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsAdmin(), state="here_position_description")
async def product_position_create_description(message: Message, state: FSMContext):
    try:
        if len(message.text) <= 600:
            if message.text != "0":
                cache_msg = await message.answer(message.text)
                await cache_msg.delete()

            await state.update_data(here_position_description=message.text)

            await state.set_state("here_position_photo")
            await message.answer("<b>üéÅ –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üì∏</b>\n" 
                                 "‚ùï –ü—Ä–∏—à–ª–∏—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
                                 )
        else:
            await message.answer("<b>‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 600 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n" 
                                 "üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú\n" 
                                 "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n" 
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
                                 )
    except CantParseEntities:
        await message.answer("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n" 
                             "üéÅ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú\n" 
                             "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n" 
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
                             )


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsAdmin(), content_types="photo", state="here_position_photo")
@dp.message_handler(IsAdmin(), text="0", state="here_position_photo")
async def product_position_create_photo(message: Message, state: FSMContext):
    async with state.proxy() as data:
        position_name = clear_html(data['here_position_name'])
        position_price = data['here_position_price']
        courier_delivery_price = data['here_position_courier_delivery_price']
        by_mail_russia_price = data['here_position_by_mail_russia_price']
        transport_company_price = data['here_position_transport_company_price']
        category_id = data['here_cache_change_category_id']
        position_description = data['here_position_description']
    await state.finish()

    position_id, position_photo = get_unix(), ""

    if "text" not in message:
        position_photo = message.photo[-1].file_id

    add_positionx(position_id, position_name, position_price, courier_delivery_price, by_mail_russia_price, transport_company_price, position_description, "", "", position_photo, category_id)
    get_message, get_photo = get_position_admin(position_id)

    if get_photo is not None:
        await message.answer_photo(get_photo, get_message,
                                   reply_markup=position_edit_open_finl(position_id, category_id, 0))
    else:
        await message.answer(get_message, reply_markup=position_edit_open_finl(position_id, category_id, 0))


################################################################################################
####################################### –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò #####################################
# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_category_open:", state="*")
async def product_position_edit_category_open(call: CallbackQuery, state: FSMContext):
    category_id = call.data.split(":")[1]

    get_category = get_categoryx(category_id=category_id)
    get_positions = get_positionsx(category_id=category_id)

    if len(get_positions) >= 1:
        await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é üñç</b>",
                                     reply_markup=position_edit_swipe_fp(0, category_id))
    else:
        await call.answer(f"üéÅ –ü–æ–∑–∏—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category['category_name']} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")


# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_category_swipe:", state="*")
async def product_position_edit_category_swipe(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>",
                                 reply_markup=position_edit_category_swipe_fp(remover))


# –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_open:", state="*")
async def product_position_edit_open(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    get_message, get_photo = get_position_admin(position_id)
    await state.finish()

    with suppress(MessageCantBeDeleted):
        await call.message.delete()

    if get_photo is not None:
        await call.message.answer_photo(get_photo, get_message,
                                        reply_markup=position_edit_open_finl(position_id, category_id, remover))
    else:
        await call.message.answer(get_message,
                                  reply_markup=position_edit_open_finl(position_id, category_id, remover))


# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_swipe:", state="*")
async def product_position_edit_swipe(call: CallbackQuery, state: FSMContext):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    with suppress(MessageCantBeDeleted):
        await call.message.delete()
    await call.message.answer("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>",
                              reply_markup=position_edit_swipe_fp(remover, category_id))


######################################## –°–ê–ú–û –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò ########################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_name:", state="*")
async def product_position_edit_name(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_remover=remover)

    with suppress(MessageCantBeDeleted):
        await call.message.delete()

    await state.set_state("here_change_position_name")
    await call.message.answer("<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑</b>",
                              reply_markup=position_edit_cancel_finl(position_id, category_id, remover))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), state="here_change_position_name")
async def product_position_edit_name_get(message: Message, state: FSMContext):
    async with state.proxy() as data:
        position_id = data['here_cache_position_id']
        category_id = data['here_cache_category_id']
        remover = data['here_cache_position_remover']

    if len(message.text) <= 50:
        await state.finish()

        update_positionx(position_id, position_name=clear_html(message.text))
        get_message, get_photo = get_position_admin(position_id)

        if get_photo is not None:
            await message.answer_photo(get_photo, get_message,
                                       reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await message.answer(get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover))
    else:
        await message.answer("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑",
                             reply_markup=position_edit_cancel_finl(position_id, category_id, remover))


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_price:", state="*")
async def product_position_edit_price(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_remover=remover)

    with suppress(MessageCantBeDeleted):
        await call.message.delete()

    await state.set_state("here_change_position_price")
    await call.message.answer("<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞</b>",
                              reply_markup=position_edit_cancel_finl(position_id, category_id, remover))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), state="here_change_position_price")
async def product_position_edit_price_get(message: Message, state: FSMContext):
    async with state.proxy() as data:
        position_id = data['here_cache_position_id']
        category_id = data['here_cache_category_id']
        remover = data['here_cache_position_remover']

    if message.text.isdigit():
        if 0 <= int(message.text) <= 10000000:
            await state.finish()

            update_positionx(position_id, position_price=message.text)
            get_message, get_photo = get_position_admin(position_id)

            if get_photo is not None:
                await message.answer_photo(get_photo, get_message,
                                           reply_markup=position_edit_open_finl(position_id, category_id, remover))
            else:
                await message.answer(get_message,
                                     reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await message.answer("<b>‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 —Ä—É–±. –∏–ª–∏ –±–æ–ª—å—à–µ 10 000 000–≥—Ä–Ω..</b>\n"
                                 "üéÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞",
                                 reply_markup=position_edit_cancel_finl(position_id, category_id, remover))
    else:
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.</b>\n"
                             "üéÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞",
                             reply_markup=position_edit_cancel_finl(position_id, category_id, remover))


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_description:", state="*")
async def product_position_edit_description(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_remover=remover)

    with suppress(MessageCantBeDeleted):
        await call.message.delete()

    await state.set_state("here_change_position_description")
    await call.message.answer("<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú</b>\n"
                              "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                              "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
                              reply_markup=position_edit_cancel_finl(position_id, category_id, remover))


# !!! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∑–∞–∫–æ–º–µ–Ω—á–µ–Ω–æ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
# # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ —Ç–æ–≤–∞—Ä–∞
# @dp.callback_query_handler(IsAdmin(), text_startswith="position_add_count:", state="*")
# async def position_add_count(call: CallbackQuery, state: FSMContext):
#     position_id = call.data.split(":")[1]
#     category_id = call.data.split(":")[2]
#     remover = int(call.data.split(":")[3])
#
#     await state.update_data(here_cache_position_id=position_id)
#     await state.update_data(here_cache_category_id=category_id)
#     await state.update_data(here_cache_position_remover=remover)
#
#     with suppress(MessageCantBeDeleted):
#         await call.message.delete()
#
#     await state.set_state("here_change_position_count")
#     await call.message.answer("<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –µ—Å—Ç—å —É –≤–∞—Å</b>",
#                               reply_markup=position_edit_cancel_finl(position_id, category_id, remover))
#
#
# @dp.message_handler(IsAdmin(), state="here_change_position_count")
# async def product_position_edit_count_get(message: Message, state: FSMContext):
#     async with state.proxy() as data:
#         category_id = data['here_cache_category_id']
#         position_id = data['here_cache_position_id']
#         remover = data['here_cache_position_remover']
#
#     try:
#         if message.text.isdigit():
#             await state.finish()
#
#             update_positionx(position_id, position_count=int(message.text))
#             get_message, get_photo = get_position_admin(position_id)
#
#             if get_photo is not None:
#                 await message.answer_photo(get_photo, get_message,
#                                            reply_markup=position_edit_open_finl(position_id, category_id, remover))
#             else:
#                 await message.answer(get_message,
#                                      reply_markup=position_edit_open_finl(position_id, category_id, remover))
#         else:
#             await message.answer("<b>‚ùå –í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.</b>\n"
#                                  "üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –µ—Å—Ç—å —É –≤–∞—Å",
#                                  reply_markup=position_edit_cancel_finl(position_id, category_id, remover))
#     except CantParseEntities:
#         await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.</b>\n"
#                              "üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞",
#                              reply_markup=position_edit_cancel_finl(position_id, category_id, remover))


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(IsAdmin(), text_startswith="position_add_colors_item:", state="*")
async def position_add_color(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_remover=remover)

    with suppress(MessageCantBeDeleted):
        await call.message.delete()

    await state.set_state("here_change_position_color")
    await call.message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –∏–º–µ—é—â–∏–µ—Å—è —É –≤–∞—Å —Ü–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞ –ø—Ä–∏–º–µ—Ä: –∫—Ä–∞—Å–Ω—ã–π, —Å–∏–Ω–∏–π, –∂–µ–ª—Ç—ã–π</b>",
                              reply_markup=position_edit_cancel_finl(position_id, category_id, remover))


@dp.message_handler(IsAdmin(), state="here_change_position_color")
async def product_position_edit_color_get(message: Message, state: FSMContext):
    async with state.proxy() as data:
        category_id = data['here_cache_category_id']
        position_id = data['here_cache_position_id']
        remover = data['here_cache_position_remover']

    try:
        if len(message.text) <= 1000:
            await state.finish()

            if message.text != "0":
                cache_msg = await message.answer(message.text)
                await cache_msg.delete()

            update_positionx(position_id, position_colors=message.text)
            get_message, get_photo = get_position_admin(position_id)

            if get_photo is not None:
                await message.answer_photo(get_photo, get_message,
                                           reply_markup=position_edit_open_finl(position_id, category_id, remover))
            else:
                await message.answer(get_message,
                                     reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await message.answer("<b>‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                                 "üéÅ –í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç–∞ –µ—â–µ —Ä–∞–∑ üìú\n",
                                 reply_markup=position_edit_cancel_finl(position_id, category_id, remover))
    except CantParseEntities:
        await message.answer("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞.</b>\n",
                             reply_markup=position_edit_cancel_finl(position_id, category_id, remover))


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(IsAdmin(), text_startswith="position_add_sizes_item:", state="*")
async def position_add_size(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_remover=remover)

    with suppress(MessageCantBeDeleted):
        await call.message.delete()

    await state.set_state("here_change_position_size")
    await call.message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã, –∏–º–µ—é—â–∏–µ—Å—è —É –≤–∞—Å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞ –ø—Ä–∏–º–µ—Ä: XL, XS, S, XSL</b>",
                              reply_markup=position_edit_cancel_finl(position_id, category_id, remover))


@dp.message_handler(IsAdmin(), state="here_change_position_size")
async def product_position_edit_size_get(message: Message, state: FSMContext):
    async with state.proxy() as data:
        category_id = data['here_cache_category_id']
        position_id = data['here_cache_position_id']
        remover = data['here_cache_position_remover']

    try:
        if len(message.text) <= 1000:
            await state.finish()

            cache_msg = await message.answer(message.text)
            await cache_msg.delete()

            update_positionx(position_id, position_sizes=message.text)
            get_message, get_photo = get_position_admin(position_id)

            if get_photo is not None:
                await message.answer_photo(get_photo, get_message,
                                           reply_markup=position_edit_open_finl(position_id, category_id, remover))
            else:
                await message.answer(get_message,
                                     reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await message.answer("<b>‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                                 "üéÅ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –µ—â–µ —Ä–∞–∑ üìú\n",
                                 reply_markup=position_edit_cancel_finl(position_id, category_id, remover))
    except CantParseEntities:
        await message.answer("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É.</b>\n",
                             reply_markup=position_edit_cancel_finl(position_id, category_id, remover))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), state="here_change_position_description")
async def product_position_edit_description_get(message: Message, state: FSMContext):
    async with state.proxy() as data:
        category_id = data['here_cache_category_id']
        position_id = data['here_cache_position_id']
        remover = data['here_cache_position_remover']

    try:
        if len(message.text) <= 600:
            await state.finish()

            if message.text != "0":
                cache_msg = await message.answer(message.text)
                await cache_msg.delete()

            update_positionx(position_id, position_description=message.text)
            get_message, get_photo = get_position_admin(position_id)

            if get_photo is not None:
                await message.answer_photo(get_photo, get_message,
                                           reply_markup=position_edit_open_finl(position_id, category_id, remover))
            else:
                await message.answer(get_message,
                                     reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await message.answer("<b>‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 600 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                                 "üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú\n"
                                 "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
                                 reply_markup=position_edit_cancel_finl(position_id, category_id, remover))
    except CantParseEntities:
        await message.answer("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É HTML.</b>\n"
                             "üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú\n"
                             "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
                             reply_markup=position_edit_cancel_finl(position_id, category_id, remover))


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_photo:", state="*")
async def product_position_edit_photo(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_remover=remover)

    with suppress(MessageCantBeDeleted):
        await call.message.delete()

    await state.set_state("here_change_position_photo")
    await call.message.answer("<b>üéÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üì∏</b>\n"
                              "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
                              reply_markup=position_edit_cancel_finl(position_id, category_id, remover))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsAdmin(), content_types="photo", state="here_change_position_photo")
@dp.message_handler(IsAdmin(), text="0", state="here_change_position_photo")
async def product_position_edit_photo_get(message: Message, state: FSMContext):
    async with state.proxy() as data:
        position_id = data['here_cache_position_id']
        category_id = data['here_cache_category_id']
        remover = data['here_cache_position_remover']
    await state.finish()

    if "text" in message:
        position_photo = ""
    else:
        position_photo = message.photo[-1].file_id

    update_positionx(position_id, position_photo=position_photo)
    get_message, get_photo = get_position_admin(position_id)

    if get_photo is not None:
        await message.answer_photo(get_photo, get_message,
                                   reply_markup=position_edit_open_finl(position_id, category_id, remover))
    else:
        await message.answer(get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover))


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∫—É—Ä—å–µ—Ä–æ–º
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_courier_delivery_price:", state="*")
async def product_position_edit_airplain(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_remover=remover)

    with suppress(MessageCantBeDeleted):
        await call.message.delete()

    await state.set_state("here_change_position_courier_delivery")
    await call.message.answer("<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º –≤ —á–∞—Ç üì¶</b>\n"
                              "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º.",
                              reply_markup=position_edit_cancel_finl(position_id, category_id, remover))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∫—É—Ä—å–µ—Ä–æ–º –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), state="here_change_position_courier_delivery")
async def product_position_edit_airplain_get(message: Message, state: FSMContext):
    async with state.proxy() as data:
        position_id = data['here_cache_position_id']
        category_id = data['here_cache_category_id']
        remover = data['here_cache_position_remover']

    if message.text.isdigit():
        if 0 <= int(message.text) <= 10000000:
            await state.finish()

            update_positionx(position_id, courier_delivery_price=message.text)
            get_message, get_photo = get_position_admin(position_id)

            if get_photo is not None:
                await message.answer_photo(get_photo, get_message,
                                           reply_markup=position_edit_open_finl(position_id, category_id, remover))
            else:
                await message.answer(get_message,
                                     reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await message.answer("<b>‚ùå –¶–µ–Ω–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∫—É—Ä—å–µ—Ä–æ–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 —Ä—É–±. –∏–ª–∏ –±–æ–ª—å—à–µ 10 000 000 —Ä—É–±.</b>\n"
                                 "üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º –≤ —á–∞—Ç üì¶\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º.",
                                 reply_markup=position_edit_cancel_finl(position_id, category_id, remover))
    else:
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.</b>\n"
                             "üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º –≤ —á–∞—Ç üì¶\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º.",
                             reply_markup=position_edit_cancel_finl(position_id, category_id, remover))


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ—á—Ç–æ–π —Ä–æ—Å—Å—Å–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_by_mail_russia_price:", state="*")
async def product_position_edit_ship(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_remover=remover)

    with suppress(MessageCantBeDeleted):
        await call.message.delete()

    await state.set_state("here_change_position_by_mail_russia_price")
    await call.message.answer("<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏ –≤ —á–∞—Ç üè£</b>\n"
                              "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º.",
                              reply_markup=position_edit_cancel_finl(position_id, category_id, remover))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ—á—Ç–æ–π —Ä–æ—Å—Å–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), state="here_change_position_by_mail_russia_price")
async def product_position_edit_ship_get(message: Message, state: FSMContext):
    async with state.proxy() as data:
        position_id = data['here_cache_position_id']
        category_id = data['here_cache_category_id']
        remover = data['here_cache_position_remover']

    if message.text.isdigit():
        if 0 <= int(message.text) <= 10000000:
            await state.finish()

            update_positionx(position_id, by_mail_russia_price=message.text)
            get_message, get_photo = get_position_admin(position_id)

            if get_photo is not None:
                await message.answer_photo(get_photo, get_message,
                                           reply_markup=position_edit_open_finl(position_id, category_id, remover))
            else:
                await message.answer(get_message,
                                     reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await message.answer("<b>‚ùå –¶–µ–Ω–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 —Ä—É–±. –∏–ª–∏ –±–æ–ª—å—à–µ 10 000 000 —Ä—É–±.</b>\n"
                                 "üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏ –≤ —á–∞—Ç üè£\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º.",
                                 reply_markup=position_edit_cancel_finl(position_id, category_id, remover))
    else:
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.</b>\n"
                             "üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏ –≤ —á–∞—Ç üè£\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º.",
                             reply_markup=position_edit_cancel_finl(position_id, category_id, remover))


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_transport_company_price:", state="*")
async def product_position_edit_ship(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_remover=remover)

    with suppress(MessageCantBeDeleted):
        await call.message.delete()

    await state.set_state("here_change_position_transport_company_price")
    await call.message.answer("<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –≤ —á–∞—Ç üöö</b>\n"
                              "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º.",
                              reply_markup=position_edit_cancel_finl(position_id, category_id, remover))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ—á—Ç–æ–π —Ä–æ—Å—Å–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), state="here_change_position_transport_company_price")
async def product_position_edit_ship_get(message: Message, state: FSMContext):
    async with state.proxy() as data:
        position_id = data['here_cache_position_id']
        category_id = data['here_cache_category_id']
        remover = data['here_cache_position_remover']

    if message.text.isdigit():
        if 0 <= int(message.text) <= 10000000:
            await state.finish()

            update_positionx(position_id, transport_company_price=message.text)
            get_message, get_photo = get_position_admin(position_id)

            if get_photo is not None:
                await message.answer_photo(get_photo, get_message,
                                           reply_markup=position_edit_open_finl(position_id, category_id, remover))
            else:
                await message.answer(get_message,
                                     reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await message.answer("<b>‚ùå –¶–µ–Ω–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 —Ä—É–±. –∏–ª–∏ –±–æ–ª—å—à–µ 10 000 000 —Ä—É–±.</b>\n"
                                 "üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –≤ —á–∞—Ç üöö\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º.",
                                 reply_markup=position_edit_cancel_finl(position_id, category_id, remover))
    else:
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.</b>\n"
                             "üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –≤ —á–∞—Ç üöö\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º.",
                             reply_markup=position_edit_cancel_finl(position_id, category_id, remover))


# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_edit_delete:", state="*")
async def product_position_edit_delete(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    with suppress(MessageCantBeDeleted):
        await call.message.delete()
    await call.message.answer("<b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é? ‚ùå</b>",
                              reply_markup=position_edit_delete_finl(position_id, category_id, remover))


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="position_delete:", state="*")
async def product_position_edit_delete_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    position_id = call.data.split(":")[2]
    category_id = call.data.split(":")[3]
    remover = int(call.data.split(":")[4])

    if get_action == "yes":
        remove_positionx(position_id=position_id)

        await call.answer("üéÅ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –ø–æ–∑–∏—Ü–∏—é –∏ –µ–µ —Ç–æ–≤–∞—Ä—ã ‚úÖ")

        if len(get_positionsx(category_id=category_id)) >= 1:
            await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é üñç</b>",
                                         reply_markup=position_edit_swipe_fp(remover, category_id))
        else:
            with suppress(MessageCantBeDeleted):
                await call.message.delete()
    else:
        get_message, get_photo = get_position_admin(position_id)

        with suppress(MessageCantBeDeleted):
            await call.message.delete()

        if get_photo is not None:
            await call.message.answer_photo(get_photo, get_message,
                                            reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await call.message.answer(get_message,
                                      reply_markup=position_edit_open_finl(position_id, category_id, remover))


################################################################################################
###################################### –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –ü–û–ó–ò–¶–ò–ô ###################################
# –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsAdmin(), text_startswith="confirm_remove_position:", state="*")
async def product_position_remove(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]

    if get_action == "yes":
        get_positions = len(get_all_positionsx())

        clear_positionx()

        await call.message.edit_text(
            f"<b>üéÅ –í—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏<code>({get_positions}—à—Ç)</code></b>")
    else:
        await call.message.edit_text("<b>üéÅ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π ‚úÖ</b>")