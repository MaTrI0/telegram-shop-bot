# - *- coding: utf- 8 - *-
from contextlib import suppress

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.exceptions import MessageCantBeDeleted

from tgbot.data.config import BOT_DESCRIPTION
from tgbot.data.loader import dp
from tgbot.keyboards.inline_all import profile_open_inl
from tgbot.keyboards.inline_page import *
from tgbot.keyboards.inline_user import user_support_finl, products_open_finl, products_confirm_finl, \
    products_confirm_add
from tgbot.services.api_sqlite import *
from tgbot.utils.const_functions import split_messages, ded, get_date1
from tgbot.utils.misc_functions import open_profile_user, get_faq

time = get_date1()

day = time.split(".")[0]
month = time.split(".")[1]
years = time.split(".")[2].replace("20", "")

print(f'{years}')


# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(text="üéÅ –¢–æ–≤–∞—Ä—ã", state="*")
async def user_shop(message: Message, state: FSMContext):
    await state.finish()

    if len(get_all_categoriesx()) >= 1:
        await message.answer("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>",
                             reply_markup=products_item_category_swipe_fp(0))
    else:
        await message.answer("<b>üéÅ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>")


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", state="*")
async def user_profile(message: Message, state: FSMContext):
    cart_item = 0
    get_user_cart_items = get_user_cart(user_id=message.from_user.id)

    if get_user_cart_items is None:
        pass
    else:
        for items in get_user_cart_items:
            cart_item += 1

    await state.finish()

    await message.answer(open_profile_user(message.from_user.id), reply_markup=profile_open_inl(cart_item))


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏
@dp.message_handler(text="üßÆ –¢–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏", state="*")
async def user_available(message: Message, state: FSMContext):
    await state.finish()

    get_categories = get_all_categoriesx()
    save_items = []

    for category in get_categories:
        get_positions = get_positionsx(category_id=category['category_id'])
        this_items = []

        if len(get_positions) >= 1:
            this_items = [f"<b>‚ûñ‚ûñ‚ûñ {category['category_name']} ‚ûñ‚ûñ‚ûñ</b>"]

            for position in get_positions:
                this_items.append(
                    f"{position['position_name']} | {position['position_price']}—Ä—É–±.")

        if len(this_items) >= 2:
            save_items.append(this_items)

    if len(save_items) >= 1:
        send_items = ":^^^^^:".join(["\n".join(item) for item in save_items])

        if len(send_items) > 3500:
            split_items = split_messages(send_items.split("\n"), 40)

            for item in split_items:
                await message.answer("\n".join(item).replace(":^^^^^:", "\n\n"))
        else:
            await message.answer("\n\n".join(["\n".join(item) for item in save_items]))
    else:
        await message.answer("<b>üéÅ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>")


# –û—Ç–∫—Ä—ã—Ç–∏–µ FAQ
@dp.message_handler(text=["‚Ñπ FAQ", "/faq"], state="*")
async def user_faq(message: Message, state: FSMContext):
    await state.finish()

    send_message = get_settingsx()['misc_faq']
    if send_message == "None":
        send_message = f"‚Ñπ ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n{BOT_DESCRIPTION}"

    await message.answer(get_faq(message.from_user.id, send_message), disable_web_page_preview=True)


# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
@dp.message_handler(text=["‚òé –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "/support"], state="*")
async def user_support(message: Message, state: FSMContext):
    await state.finish()

    await message.answer(f"‚òé –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                         reply_markup=user_support_finl(),
                         disable_web_page_preview=True)


################################################################################################
# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
@dp.callback_query_handler(text="user_history", state="*")
async def user_history(call: CallbackQuery, state: FSMContext):
    cart_item = 0
    get_user_cart_items = get_user_cart(user_id=call.from_user.id)

    if get_user_cart_items is None:
        pass
    else:
        for items in get_user_cart_items:
            cart_item += 1

    last_purchases = last_purchasesx(call.from_user.id, 5)

    if len(last_purchases) >= 1:
        await call.answer("üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–∫—É–ø–æ–∫")
        with suppress(MessageCantBeDeleted):
            await call.message.delete()

        for purchases in last_purchases:

            await call.message.answer(ded(f"""
                                      <b>üßæ –ß–µ–∫: <code>#{purchases['purchase_receipt']}</code></b>
                                      üéÅ –ü—É–Ω–∫—Ç: <code>{purchases['purchase_position_name']} | {purchases['purchase_count']}—à—Ç | {purchases['purchase_price']}—Ä—É–±.</code>
                                      üï∞ –î–∞—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è: <code>{purchases['purchase_date']}</code>
                                      """))

        await call.message.answer(open_profile_user(call.from_user.id), reply_markup=profile_open_inl(cart_item))
    else:
        await call.answer("‚ùó –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∫—É–ø–∫–∏", True)


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é
@dp.callback_query_handler(text="user_profile", state="*")
async def user_profile_return(call: CallbackQuery, state: FSMContext):
    cart_item = 0
    get_user_cart_items = get_user_cart(user_id=call.from_user.id)

    if get_user_cart_items is None:
        pass
    else:
        for items in get_user_cart_items:
            cart_item += 1

    await call.message.edit_text(open_profile_user(call.from_user.id), reply_markup=profile_open_inl(cart_item))


################################################################################################
######################################### –ü–û–ö–£–ü–ö–ê –¢–û–í–ê–†–ê #######################################
# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_category_swipe:", state="*")
async def user_purchase_category_next_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>",
                                 reply_markup=products_item_category_swipe_fp(remover))


# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_category_open:", state="*")
async def user_purchase_category_open(call: CallbackQuery, state: FSMContext):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    get_category = get_categoryx(category_id=category_id)
    get_positions = get_positionsx(category_id=category_id)

    if len(get_positions) >= 1:
        with suppress(MessageCantBeDeleted):
            await call.message.delete()

        await call.message.answer(f"<b>üéÅ –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code></b>",
                                  reply_markup=products_item_position_swipe_fp(remover, category_id))
    else:
        if remover == "0":
            await call.message.edit_text("<b>üéÅ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>")
            await call.answer("‚ùó –ü–æ–∑–∏—Ü–∏–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
        else:
            await call.answer(f"‚ùï –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category['category_name']} –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤—É—é—Ç")


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_position_open:", state="*")
async def user_purchase_position_open(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    get_position = get_positionx(position_id=position_id)
    get_category = get_categoryx(category_id=category_id)

    if get_position['position_description'] == "0":
        text_description = ""
    else:
        text_description = f"\nüìú –û–ø–∏—Å–∞–Ω–∏–µ:\n{get_position['position_description']}"

    color_text = "<code>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå</code>"
    size_text = "<code>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå</code>"

    if get_position["position_colors"] != "":
        color_text = f"{get_position['position_colors']}"

    if get_position["position_sizes"] != "":
        size_text = f"{get_position['position_sizes']}"

    send_msg = ded(f"""
               <b>üéÅ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:</b>
               ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
               üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{get_position['position_name']}</code>
               üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code>
               üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{get_position['position_price']}—Ä—É–±.</code>
               üé® –¶–≤–µ—Ç–∞: <code>{color_text}</code>
               üìè –†–∞–∑–º–µ—Ä—ã: <code>{size_text}</code>
               {text_description}
               """)

    if len(get_position['position_photo']) >= 5:
        with suppress(MessageCantBeDeleted):
            await call.message.delete()
        await call.message.answer_photo(get_position['position_photo'],
                                        send_msg, reply_markup=products_open_finl(position_id, category_id, remover))
    else:
        await call.message.edit_text(send_msg,
                                     reply_markup=products_open_finl(position_id, category_id, remover))


# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_position_swipe:", state="*")
async def user_purchase_position_next_page(call: CallbackQuery, state: FSMContext):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    get_category = get_categoryx(category_id=category_id)

    await call.message.edit_text(f"<b>üéÅ –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code></b>",
                                 reply_markup=products_item_position_swipe_fp(remover, category_id))


########################################### –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ö–û–†–ó–ò–ù–£ ##########################################
# –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
@dp.callback_query_handler(text_startswith="cart_item_open:", state="*")
async def user_purchase_select(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]

    get_position = get_positionx(position_id=position_id)

    await state.update_data(here_cache_position_id=position_id)
    await state.set_state("cart_item_color")

    await call.message.answer(ded(f"""
                              <b>üéÅ –í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É</b>
                              ‚ñ∂ <code>{get_position['position_colors']}</code>
                              ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                              üéÅ –ü—É–Ω–∫—Ç: <code>{get_position['position_name']}</code> - <code>{get_position['position_price']}—Ä—É–±.</code>
                              """))


# –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
@dp.message_handler(state="cart_item_color")
async def user_purchase_select_color(message: Message, state: FSMContext):
    position_id = (await state.get_data())['here_cache_position_id']
    get_position = get_positionx(position_id=position_id)

    if message.text in get_position['position_colors']:
        await state.update_data(changed_color=message.text)

        await state.set_state("cart_item_size")

        await message.answer(ded(f"""
                                  <b>üéÅ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É</b>
                                  ‚ñ∂ <code>{get_position['position_sizes']}</code>
                                  ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                                  üéÅ –ü—É–Ω–∫—Ç: <code>{get_position['position_name']}</code> - <code>{get_position['position_price']}—Ä—É–±.</code>
                                  """))
    else:
        await message.answer("<b>‚ùå –¢–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n"
                             "–£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–Ω –Ω–∏–∂–µ:\n"
                             f"\t\t‚ñ∂ <code>{get_position['position_colors']}</code>")


# –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
@dp.message_handler(state="cart_item_size")
async def user_purchase_select_size(message: Message, state: FSMContext):
    position_id = (await state.get_data())['here_cache_position_id']
    get_position = get_positionx(position_id=position_id)

    if message.text in get_position['position_sizes']:
        await state.update_data(changed_size=message.text)

        await state.set_state("cart_here_item_count")

        await message.answer(ded(f"""
                       ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                       üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
                       ‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>100</code>
                       ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                       üéÅ –ü—É–Ω–∫—Ç: <code>{get_position['position_name']}</code> - <code>{get_position['position_price']}—Ä—É–±.</code>
                       """))
    else:
        await message.answer("<b>–¢–∞–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n"
                             "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–Ω –Ω–∏–∂–µ:\n"
                             f"\t\t‚ñ∂ <code>{get_position['position_sizes']}</code>")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
@dp.message_handler(state="cart_here_item_count")
async def user_purchase_select_count(message: Message, state: FSMContext):
    position_id = (await state.get_data())['here_cache_position_id']
    get_select_color = (await state.get_data())['changed_color']
    get_select_size = (await state.get_data())['changed_size']

    get_position = get_positionx(position_id=position_id)

    send_message = ded(f"""
                   ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                   üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
                   ‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>100</code>
                   ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                   üéÅ –ü—É–Ω–∫—Ç: <code>{get_position['position_name']}</code> - <code>{get_position['position_price']}—Ä—É–±.</code>
                   """)

    if message.text.isdigit():
        get_count = int(message.text)
        amount_pay = int(get_position['position_price']) * get_count

        if 1 <= get_count <= 100:
            await state.finish()
            await message.answer(ded(f"""
                                 <b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä(—ã) –≤ –∫–æ—Ä–∑–∏–Ω—É?</b>
                                 ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                                 üéÅ –ü—É–Ω–∫—Ç: <code>{get_position['position_name']}</code>
                                 üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{get_count}—à—Ç</code>
                                 üé® –¶–≤–µ—Ç: <code>{get_select_color}</code>
                                 üìè –†–∞–∑–º–µ—Ä: <code>{get_select_size}</code>
                                 üí∞ –°—É–º–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: <code>{amount_pay}—Ä—É–±.</code>
                                 """),
                                 reply_markup=products_confirm_add(position_id, get_count, get_select_color, get_select_size))
        else:
            await message.answer(f"<b>‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤.</b>\n" + send_message)
    else:
        await message.answer(f"<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.</b>\n" + send_message)


##############################################################################################
########################################### –ü–†–û–ú–û–ö–û–î–´ ##########################################
# –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.callback_query_handler(text_startswith="activation_promocode", state="*")
async def activation_promocode(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await state.set_state("promocode_name")

    await call.message.answer("üé´ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞")


@dp.message_handler(state="promocode_name")
async def promocode_name_get(message: Message, state: FSMContext):
    await state.update_data(promocode_name=message.text)

    async with state.proxy() as data:
        promocode_name = data['promocode_name']

        await state.finish()

        prom = get_promocode(promocode_name=promocode_name)
        purchasex = get_purchasex(user_id=message.from_user.id)

        if prom is not None:
            prom_user = get_promocode_activation_user(promocode_name=promocode_name)
            if prom_user is None:
                if prom['promocode_first_buy'] == "yes":
                    if purchasex is not None:
                        await message.answer(
                            "<b>‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É, –≤—ã —É–∂–µ –¥–µ–ª–∞–ª–∏ –ø–æ–∫—É–ø–∫–∏ –≤ –¥–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ</b>")
                else:
                    if prom['promocode_activation_count'] == 0:
                        if prom['promocode_valid_period'] == '00.00.00':
                            await message.answer(
                                "<b>‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å</b>")
                        else:
                            if prom['promocode_activation_count'] == 0:
                                if prom['promocode_valid_period'] == f'{day}.{month}.{years}':
                                    await message.answer("<b>‚ùå –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫–æ</b>")
                    else:
                        new_prom_activation_count = prom['promocode_activation_count'] - 1
                        update_promocode(prom['promocode_name'], promocode_activation_count=new_prom_activation_count)
                        add_promocode_activation_user(message.from_user.id, prom['promocode_name'], 1)
                        update_userx(message.from_user.id, user_promocode=prom['promocode_name'])

                        await message.answer("<b>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–µ</b>")
            else:
                if prom['promocode_one_client'] == "yes":
                    if prom_user['activation_count'] == 1:
                        await message.answer("<b>‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π, –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ—é –ø–æ–ø—ã—Ç–∫—É</b>")
                else:
                    if prom['promocode_first_buy'] == "yes":
                        if purchasex is not None:
                            await message.answer("<b>‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É, –≤—ã —É–∂–µ –¥–µ–ª–∞–ª–∏ –ø–æ–∫—É–ø–∫–∏ –≤ –¥–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ</b>")
                    else:
                        if prom['promocode_activation_count'] == 0:
                            if prom['promocode_valid_period'] == '00.00.00':
                                await message.answer(
                                    "<b>‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å</b>")
                            else:
                                if prom['promocode_activation_count'] == 0:
                                    if prom['promocode_valid_period'] == f'{day}.{month}.{years}':
                                        await message.answer("<b>‚ùå –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫–æ</b>")
                        else:
                            new_activation_count = prom_user['activation_count'] + 1
                            new_prom_activation_count = prom['promocode_activation_count'] - 1
                            update_promocode_activation_user(message.from_user.id, activation_count=new_activation_count)
                            update_promocode(prom['promocode_name'], promocode_activation_count=new_prom_activation_count)
                            update_userx(message.from_user.id, user_promocode=prom['promocode_name'])

                            await message.answer(
                                "<b>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–µ</b>")
        else:
            await message.answer("<b>‚ùå –ü—Ä–æ–º–æ–∫–æ–¥–∞ —Å –¥–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>")
