from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ShippingOption, ShippingQuery, LabeledPrice, PreCheckoutQuery, CallbackQuery
from aiogram.types.message import ContentType

from tgbot.keyboards.inline_all import profile_open_inl
from tgbot.keyboards.reply_all import menu_frep
from tgbot.services.api_sqlite import *
from tgbot.data.config import PAYMENTS_TOKEN, BOT_TECH_CHAT_ID
from tgbot.data.loader import dp, bot
from tgbot.utils.const_functions import get_unix, get_date, ded
from tgbot.utils.misc_functions import open_profile_user

shipping_options = []
receipt = get_unix()
buy_time = get_date()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(text_startswith="pay_cart:", state="*")
async def start_pay_cart(call: CallbackQuery, state: FSMContext):
    shipping_options.clear()
    get_action = call.data.split(":")[1]
    buy_item_count = 0

    get_cart_items = get_user_cart(user_id=call.from_user.id)

    for item in get_cart_items:
        buy_item_count += 1

    if get_action == "yes":
        await state.finish()
        buy_product_count = 0
        buy_position_cost = 0
        PRICES = []

        courier_delivery_price = 0
        by_mail_russia_price = 0
        transport_company_price = 0

        if not get_cart_items:
            return await call.answer(f"üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ :(")

        for item in get_cart_items:
            get_position = get_positionx(position_id=item.get("position_id"))
            amount_pay = int(item.get('position_price'))
            PRICES.append(LabeledPrice(label=f'{get_position["position_name"]}', amount=(amount_pay * 100)))

            buy_product_count += item.get("position_count")
            buy_position_cost += item.get("position_price")

            courier_delivery_price = get_position["courier_delivery_price"]
            by_mail_russia_price = get_position["by_mail_russia_price"]
            transport_company_price = get_position["transport_company_price"]

        COURIER_DELIVERY_OPTIONS = ShippingOption(
            id='courier_delivery',
            title='–ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'
        ).add(LabeledPrice("–ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", (courier_delivery_price * 100)))
        shipping_options.append(COURIER_DELIVERY_OPTIONS)

        BY_MAIL_RUSSIA_OPTIONS = ShippingOption(
            id='by_mail_russia',
            title='–ü–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏'
        ).add(LabeledPrice("–ü–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏", (by_mail_russia_price * 100)))
        shipping_options.append(BY_MAIL_RUSSIA_OPTIONS)

        TRANSPORT_COMPANY_OPTIONS = ShippingOption(
            id='transport_company',
            title='–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è'
        ).add(LabeledPrice("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è", (transport_company_price * 100)))
        shipping_options.append(TRANSPORT_COMPANY_OPTIONS)

        await call.message.delete()

        await bot.send_invoice(call.message.chat.id,
                               title="–û–ø–ª–∞—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã",
                               description='–í —ç—Ç–æ–º –æ–∫–Ω–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—â–∏–µ—Å—è –≤ –∫–æ—Ä–∑–∏–Ω–µ.',
                               provider_token=PAYMENTS_TOKEN,
                               currency='rub',
                               need_email=True,
                               need_phone_number=True,
                               need_shipping_address=True,
                               is_flexible=True,
                               prices=PRICES,
                               start_parameter='cart-payment',
                               payload='test-invoice-payload',
                               )
    else:
        if buy_item_count >= 1:
            await call.message.edit_text(open_profile_user(call.from_user.id), reply_markup=profile_open_inl(buy_item_count))
        else:
            await call.message.edit_text("<b>‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–ø–ª–∞—Ç—É –∫–æ—Ä–∑–∏–Ω—ã.</b>")


@dp.shipping_query_handler(lambda q: True)
async def shiping_process(shiping_query: ShippingQuery):
    if shiping_query.shipping_address.country_code != "RU":
        return await bot.answer_shipping_query(
            shiping_query.id,
            ok=False,
            error_message="–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏"
        )

    if shiping_query.shipping_address.city == '–û–º—Å–∫':
        PICKUP_OPTIONS = ShippingOption(
            id='pickup',
            title='–°–∞–º–æ–≤—ã–≤–æ–∑'
        ).add(LabeledPrice("–°–∞–º–æ–≤—ã–≤–æ–∑ –≤ –û–º—Å–∫–µ", (50 * 100)))
        shipping_options.append(PICKUP_OPTIONS)

    await bot.answer_shipping_query(
        shiping_query.id,
        ok=True,
        shipping_options=shipping_options
    )
    shipping_options.clear()


@dp.pre_checkout_query_handler(lambda q: True)
async def checkout_process(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT, state='*')
async def successful_payment(message: Message, state: FSMContext):
    buy_item_count = 0
    buy_product_count = 0
    buy_position_cost = 0
    amount_pay = 0
    products = """"""
    await state.finish()

    get_cart_items = get_user_cart(user_id=message.from_user.id)
    get_user = get_userx(user_id=message.from_user.id)

    for item in get_cart_items:
        get_position = get_positionx(position_id=item.get("position_id"))
        products += f"\n<code>{get_position['position_name']} | {item.get('position_count')}—à—Ç | {item.get('position_price')}—Ä—É–±.</code>"

        buy_item_count += 1
        buy_product_count += item.get("position_count")
        buy_position_cost += item.get("position_price")

    add_purchasex(get_user['user_id'], get_user['user_login'], get_user['user_name'], receipt, buy_product_count,
                  buy_position_cost, None, None,
                  f"–û–ø–ª–∞—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã-{receipt}", buy_time, receipt, None, None)

    remove_cart(user_id=message.from_user.id)

    await bot.send_message(
        message.chat.id,
        ded(f"""
                <b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä(—ã)</b>
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                üßæ –ß–µ–∫: <code>#{receipt}</code>
                üõí –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω—ã!
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: <code>{buy_item_count}</code>
                –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: <code>{buy_position_cost}</code>
                –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: <code>{message.successful_payment.shipping_option_id}</code>
                üï∞ –î–∞—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è: <code>{buy_time}</code>
            """),
        reply_markup=menu_frep(message.from_user.id)
    )

    await message.bot.send_message(chat_id=BOT_TECH_CHAT_ID,
                                   text=ded(f"""
                                            <b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a> —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä(—ã)</b>
                                            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                                            üßæ –ß–µ–∫: <code>#{receipt}</code>

                                            üéÅ –¢–æ–≤–∞—Ä—ã: {products}

                                            –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: <code>{message.successful_payment.shipping_option_id}</code>
                                            –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏: \n\t –¢–µ–ª–µ—Ñ–æ–Ω: <code>{message.successful_payment.order_info.phone_number}</code> \n\t Email: <code>{message.successful_payment.order_info.email}</code>
                                            –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: \n\t\t –ê–¥—Ä–µ—Å 1: <code>{message.successful_payment.order_info.shipping_address.street_line1}</code> \n\t\t –ê–¥—Ä–µ—Å 2: <code>{message.successful_payment.order_info.shipping_address.street_line2}</code> \n\t\t –°—Ç—Ä–∞–Ω–∞: <code>{message.successful_payment.order_info.shipping_address.country_code}</code> \n\t\t –ò–Ω–¥–µ–∫—Å: <code>{message.successful_payment.order_info.shipping_address.post_code}</code> \n\t\t –û–±–ª–∞—Å—Ç—å: <code>{message.successful_payment.order_info.shipping_address.state}</code> \n\t\t –ì–æ—Ä–æ–¥: <code>{message.successful_payment.order_info.shipping_address.city}</code> \n\t\t
                                            ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                                            üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{buy_time}</code>
                                        """),)

